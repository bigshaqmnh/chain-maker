const chai = require('chai');
const { expect, assert } = chai;
it.optional = require('./it-optional');

Object.freeze(assert);

const chainMaker = require('./task');

describe('Make chain!', () => {
  //Presence requirement
  describe('variable presence', () => {
    it.optional('function makeChain exists', () => {
      expect(chainMaker).to.exist;
    });
  });

  describe('base requirements', () => {
    it.optional('chaining works!', () => {
      assert.deepEqual(chainMaker.addValue(function() {}).addValue('2nd').addValue('3rd').removeValue(2).reverseChain().finishChain(), '( 3rd )~~( function() {} )');
    });
    it.optional('throws an Error when trying to chain getLength or finishChain methods', () => {
      expect(() => chainMaker.addValue(1).getLength().addValue(3).removeValue(1)).to.throw();
      expect(() => chainMaker.addValue(1).addValue(2).getLength().removeValue(2)).to.throw();
      expect(() => chainMaker.addValue(1).addValue(2).finishChain().addValue(1)).to.throw();
      expect(() => chainMaker.addValue(1).finishChain().addValue(3).removeValue(1)).to.throw();
    });
    it.optional('throws an Error on removing wrong link', () => {
      expect(() => chainMaker.addValue(1).addValue(2).addValue(3).removeValue(0)).to.throw();
      expect(() => chainMaker.addValue(1).addValue(2).addValue(3).removeValue('2nd')).to.throw();
      expect(() => chainMaker.addValue(1).addValue(2).addValue(3).removeValue(-2)).to.throw();
      expect(() => chainMaker.addValue(1).addValue(2).addValue(3).removeValue(4)).to.throw();
    });
  });

  //Functional requirements
  describe('functional requirements', () => {
    it.optional('function returns correct values', () => {
      assert.deepEqual(chainMaker.addValue().reverseChain().addValue().reverseChain().addValue().reverseChain().addValue().reverseChain().addValue().addValue().finishChain(), '( )~~( )~~( )~~( )~~( )~~( )');
      assert.deepEqual(chainMaker.addValue('GHI').addValue(null).reverseChain().addValue(333).reverseChain().reverseChain().addValue(0).reverseChain().reverseChain().addValue('GHI').finishChain(), '( null )~~( GHI )~~( 333 )~~( 0 )~~( GHI )');
      assert.deepEqual(chainMaker.addValue('8.963').reverseChain().reverseChain().reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(3.14).addValue('DEF').reverseChain().finishChain(), '( DEF )~~( 3.14 )~~( 8.963 )~~( [object Object] )');
      assert.deepEqual(chainMaker.addValue(false).reverseChain().reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(1.233).addValue(false).addValue(1).reverseChain().addValue(1).finishChain(), '( 1 )~~( false )~~( 1.233 )~~( [object Object] )~~( false )~~( 1 )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue(NaN).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(true).finishChain(), '( NaN )~~( [object Object] )~~( [object Object] )~~( [object Object] )~~( [object Object] )~~( true )');
      assert.deepEqual(chainMaker.addValue(1).reverseChain().addValue(0).reverseChain().addValue(NaN).addValue(1.233).addValue(null).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).finishChain(), '( [object Object] )~~( null )~~( 1.233 )~~( NaN )~~( 1 )~~( 0 )~~( [object Object] )');
      assert.deepEqual(chainMaker.addValue(NaN).addValue(null).addValue(Infinity).addValue(1).reverseChain().addValue(null).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(22).addValue(333).finishChain(), '( null )~~( NaN )~~( null )~~( Infinity )~~( 1 )~~( [object Object] )~~( 22 )~~( 333 )');
      assert.deepEqual(chainMaker.addValue(0).addValue(NaN).addValue(1).reverseChain().addValue(0).reverseChain().reverseChain().addValue(1).addValue(Infinity).reverseChain().finishChain(), '( Infinity )~~( 1 )~~( 0 )~~( 0 )~~( NaN )~~( 1 )');
      assert.deepEqual(chainMaker.addValue('ABC').reverseChain().addValue(Infinity).addValue(null).addValue('8.963').addValue(false).addValue(Infinity).reverseChain().addValue(false).reverseChain().finishChain(), '( false )~~( ABC )~~( Infinity )~~( null )~~( 8.963 )~~( false )~~( Infinity )');
      assert.deepEqual(chainMaker.reverseChain().addValue('DEF').reverseChain().reverseChain().reverseChain().addValue(333).addValue(null).addValue(0).reverseChain().reverseChain().finishChain(), '( DEF )~~( 333 )~~( null )~~( 0 )');
      assert.deepEqual(chainMaker.addValue('DEF').reverseChain().addValue('8.963').reverseChain().reverseChain().reverseChain().addValue(3.14).reverseChain().reverseChain().reverseChain().finishChain(), '( 3.14 )~~( DEF )~~( 8.963 )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue(false).addValue(true).reverseChain().addValue(null).addValue(0).addValue(3.14).addValue('8.963').addValue('GHI').finishChain(), '( true )~~( false )~~( null )~~( 0 )~~( 3.14 )~~( 8.963 )~~( GHI )');
      assert.deepEqual(chainMaker.addValue(1.233).addValue('ABC').addValue('GHI').reverseChain().addValue(NaN).addValue(false).addValue('ABC').reverseChain().reverseChain().reverseChain().finishChain(), '( ABC )~~( false )~~( NaN )~~( 1.233 )~~( ABC )~~( GHI )');
      assert.deepEqual(chainMaker.reverseChain().addValue('GHI').reverseChain().reverseChain().reverseChain().addValue('DEF').addValue(Infinity).reverseChain().addValue(Infinity).reverseChain().finishChain(), '( Infinity )~~( GHI )~~( DEF )~~( Infinity )');
      assert.deepEqual(chainMaker.addValue(333).reverseChain().addValue(NaN).reverseChain().addValue(0).reverseChain().addValue('ABC').reverseChain().addValue(1.233).addValue(null).finishChain(), '( ABC )~~( NaN )~~( 333 )~~( 0 )~~( 1.233 )~~( null )');
      assert.deepEqual(chainMaker.reverseChain().addValue(false).reverseChain().reverseChain().addValue(Infinity).addValue(NaN).reverseChain().addValue(22).reverseChain().reverseChain().finishChain(), '( NaN )~~( Infinity )~~( false )~~( 22 )');
      assert.deepEqual(chainMaker.addValue('DEF').addValue(22).addValue('ABC').addValue(3.14).addValue(333).addValue('8.963').addValue(0).addValue(1.233).addValue(NaN).reverseChain().finishChain(), '( NaN )~~( 1.233 )~~( 0 )~~( 8.963 )~~( 333 )~~( 3.14 )~~( ABC )~~( 22 )~~( DEF )');
      assert.deepEqual(chainMaker.reverseChain().addValue(null).addValue(false).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(1).reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().finishChain(), '( [object Object] )~~( 1 )~~( null )~~( false )~~( [object Object] )');
      assert.deepEqual(chainMaker.addValue('DEF').reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(3.14).addValue('DEF').finishChain(), '( DEF )~~( [object Object] )~~( 3.14 )~~( DEF )');
      assert.deepEqual(chainMaker.addValue('DEF').addValue(1.233).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(1).reverseChain().addValue(NaN).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().finishChain(), '( [object Object] )~~( 1 )~~( [object Object] )~~( DEF )~~( 1.233 )~~( NaN )');
      assert.deepEqual(chainMaker.addValue(null).reverseChain().addValue(1).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(22).addValue(3.14).reverseChain().reverseChain().reverseChain().finishChain(), '( 3.14 )~~( 22 )~~( null )~~( 1 )~~( [object Object] )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(NaN).reverseChain().reverseChain().reverseChain().finishChain(), '( NaN )~~( [object Object] )~~( [object Object] )');
      assert.deepEqual(chainMaker.addValue(1).addValue('DEF').addValue(1.233).addValue(0).reverseChain().reverseChain().reverseChain().reverseChain().addValue(NaN).reverseChain().finishChain(), '( NaN )~~( 0 )~~( 1.233 )~~( DEF )~~( 1 )');
      assert.deepEqual(chainMaker.addValue('8.963').addValue('GHI').reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().addValue(NaN).reverseChain().addValue(1.233).addValue(333).finishChain(), '( NaN )~~( [object Object] )~~( 8.963 )~~( GHI )~~( 1.233 )~~( 333 )');
      assert.deepEqual(chainMaker.addValue(true).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(false).reverseChain().addValue(Infinity).addValue(1.233).reverseChain().addValue(3.14).reverseChain().addValue('GHI').finishChain(), '( 3.14 )~~( false )~~( [object Object] )~~( true )~~( Infinity )~~( 1.233 )~~( GHI )');
      assert.deepEqual(chainMaker.reverseChain().addValue('GHI').addValue(NaN).reverseChain().reverseChain().addValue(false).addValue(3.14).reverseChain().reverseChain().addValue(333).finishChain(), '( GHI )~~( NaN )~~( false )~~( 3.14 )~~( 333 )');
      assert.deepEqual(chainMaker.addValue(null).reverseChain().reverseChain().reverseChain().reverseChain().addValue('DEF').reverseChain().addValue('DEF').addValue(Infinity).addValue('8.963').finishChain(), '( DEF )~~( null )~~( DEF )~~( Infinity )~~( 8.963 )');
      assert.deepEqual(chainMaker.reverseChain().addValue('DEF').reverseChain().reverseChain().reverseChain().reverseChain().addValue(0).reverseChain().addValue(Infinity).addValue(Infinity).finishChain(), '( 0 )~~( DEF )~~( Infinity )~~( Infinity )');
      assert.deepEqual(chainMaker.addValue(null).reverseChain().addValue(1.233).reverseChain().addValue(NaN).reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().finishChain(), '( NaN )~~( null )~~( 1.233 )');
      assert.deepEqual(chainMaker.addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().reverseChain().addValue(1).addValue(null).reverseChain().reverseChain().addValue(22).reverseChain().finishChain(), '( 22 )~~( null )~~( 1 )~~( [object Object] )');
      assert.deepEqual(chainMaker.addValue(0).reverseChain().addValue('DEF').addValue(1).addValue(1).reverseChain().reverseChain().addValue(1.233).reverseChain().reverseChain().finishChain(), '( 0 )~~( DEF )~~( 1 )~~( 1 )~~( 1.233 )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(1).addValue('8.963').addValue({ 0: 'first', 1: 'second', 'length': 2 }).finishChain(), '( [object Object] )~~( [object Object] )~~( 1 )~~( 8.963 )~~( [object Object] )');
      assert.deepEqual(chainMaker.addValue(22).reverseChain().addValue(NaN).reverseChain().addValue(3.14).reverseChain().reverseChain().addValue(null).reverseChain().addValue(NaN).finishChain(), '( null )~~( 3.14 )~~( 22 )~~( NaN )~~( NaN )');
      assert.deepEqual(chainMaker.addValue(0).reverseChain().reverseChain().addValue(false).addValue('GHI').addValue(true).reverseChain().reverseChain().reverseChain().addValue(1.233).finishChain(), '( true )~~( GHI )~~( false )~~( 0 )~~( 1.233 )');
      assert.deepEqual(chainMaker.addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue('GHI').reverseChain().addValue(true).reverseChain().reverseChain().reverseChain().addValue(1.233).reverseChain().reverseChain().finishChain(), '( true )~~( [object Object] )~~( GHI )~~( 1.233 )');
      assert.deepEqual(chainMaker.addValue(1).reverseChain().reverseChain().addValue(3.14).reverseChain().reverseChain().addValue('ABC').addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(3.14).finishChain(), '( [object Object] )~~( ABC )~~( 3.14 )~~( 1 )~~( 3.14 )');
      assert.deepEqual(chainMaker.reverseChain().addValue(1.233).addValue(22).addValue('DEF').reverseChain().addValue(1.233).addValue(333).addValue(true).addValue(1).addValue(333).finishChain(), '( DEF )~~( 22 )~~( 1.233 )~~( 1.233 )~~( 333 )~~( true )~~( 1 )~~( 333 )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(0).addValue('GHI').reverseChain().reverseChain().addValue(Infinity).addValue('8.963').finishChain(), '( [object Object] )~~( 0 )~~( GHI )~~( Infinity )~~( 8.963 )');
      assert.deepEqual(chainMaker.addValue(3.14).addValue(Infinity).addValue(Infinity).addValue(333).reverseChain().reverseChain().reverseChain().addValue(null).reverseChain().addValue(22).finishChain(), '( null )~~( 3.14 )~~( Infinity )~~( Infinity )~~( 333 )~~( 22 )');
      assert.deepEqual(chainMaker.reverseChain().addValue('GHI').reverseChain().addValue(true).addValue(false).addValue(null).addValue('DEF').reverseChain().reverseChain().reverseChain().finishChain(), '( DEF )~~( null )~~( false )~~( true )~~( GHI )');
      assert.deepEqual(chainMaker.addValue(3.14).addValue(1).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue('DEF').addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(true).addValue(false).addValue(333).reverseChain().reverseChain().finishChain(), '( 3.14 )~~( 1 )~~( [object Object] )~~( DEF )~~( [object Object] )~~( true )~~( false )~~( 333 )');
      assert.deepEqual(chainMaker.reverseChain().addValue(NaN).reverseChain().addValue(null).reverseChain().reverseChain().addValue(NaN).addValue('8.963').addValue(333).addValue(333).finishChain(), '( NaN )~~( null )~~( NaN )~~( 8.963 )~~( 333 )~~( 333 )');
      assert.deepEqual(chainMaker.addValue('GHI').reverseChain().reverseChain().addValue('8.963').addValue(false).addValue(NaN).reverseChain().addValue(22).addValue('GHI').addValue(false).finishChain(), '( NaN )~~( false )~~( 8.963 )~~( GHI )~~( 22 )~~( GHI )~~( false )');
      assert.deepEqual(chainMaker.addValue(22).addValue('ABC').reverseChain().reverseChain().addValue(NaN).reverseChain().addValue(333).addValue(22).addValue('GHI').addValue(Infinity).finishChain(), '( NaN )~~( ABC )~~( 22 )~~( 333 )~~( 22 )~~( GHI )~~( Infinity )');
      assert.deepEqual(chainMaker.addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(22).addValue(NaN).addValue('8.963').addValue(1.233).addValue(NaN).reverseChain().addValue('ABC').reverseChain().addValue(3.14).finishChain(), '( ABC )~~( [object Object] )~~( 22 )~~( NaN )~~( 8.963 )~~( 1.233 )~~( NaN )~~( 3.14 )');
      assert.deepEqual(chainMaker.addValue(333).reverseChain().reverseChain().addValue('ABC').addValue('8.963').reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(false).addValue('ABC').finishChain(), '( [object Object] )~~( 333 )~~( ABC )~~( 8.963 )~~( false )~~( ABC )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue(false).reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().addValue(null).reverseChain().finishChain(), '( null )~~( false )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue(0).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().addValue(true).addValue(NaN).reverseChain().finishChain(), '( NaN )~~( true )~~( [object Object] )~~( 0 )');
      assert.deepEqual(chainMaker.reverseChain().addValue('ABC').reverseChain().addValue(NaN).addValue(false).reverseChain().addValue('ABC').addValue(false).reverseChain().addValue(1.233).finishChain(), '( false )~~( ABC )~~( ABC )~~( NaN )~~( false )~~( 1.233 )');
      assert.deepEqual(chainMaker.addValue(0).addValue(22).addValue('ABC').reverseChain().reverseChain().addValue(Infinity).reverseChain().addValue('8.963').addValue(0).addValue('ABC').finishChain(), '( Infinity )~~( ABC )~~( 22 )~~( 0 )~~( 8.963 )~~( 0 )~~( ABC )');
      assert.deepEqual(chainMaker.addValue(true).reverseChain().addValue(Infinity).addValue(333).addValue(1).addValue(NaN).addValue(1.233).reverseChain().addValue(22).reverseChain().finishChain(), '( 22 )~~( true )~~( Infinity )~~( 333 )~~( 1 )~~( NaN )~~( 1.233 )');
      assert.deepEqual(chainMaker.reverseChain().addValue('8.963').reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().finishChain(), '( [object Object] )~~( 8.963 )');
      assert.deepEqual(chainMaker.addValue('ABC').reverseChain().reverseChain().addValue('DEF').addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(1.233).addValue(1.233).reverseChain().addValue('ABC').finishChain(), '( 1.233 )~~( 1.233 )~~( ABC )~~( DEF )~~( [object Object] )~~( ABC )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue(0).reverseChain().addValue('DEF').reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(1).finishChain(), '( 0 )~~( DEF )~~( [object Object] )~~( 1 )');
      assert.deepEqual(chainMaker.addValue(1).reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(false).reverseChain().reverseChain().reverseChain().addValue('GHI').reverseChain().finishChain(), '( GHI )~~( 1 )~~( [object Object] )~~( false )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue('DEF').addValue(333).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().finishChain(), '( [object Object] )~~( 333 )~~( DEF )');
      assert.deepEqual(chainMaker.reverseChain().addValue(333).reverseChain().addValue(Infinity).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(true).addValue(true).addValue(22).addValue(333).finishChain(), '( [object Object] )~~( Infinity )~~( 333 )~~( true )~~( true )~~( 22 )~~( 333 )');
      assert.deepEqual(chainMaker.addValue(NaN).reverseChain().addValue(333).addValue(NaN).reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().addValue(null).finishChain(), '( NaN )~~( 333 )~~( NaN )~~( null )');
      assert.deepEqual(chainMaker.addValue(22).reverseChain().reverseChain().reverseChain().reverseChain().addValue(NaN).reverseChain().reverseChain().reverseChain().reverseChain().finishChain(), '( 22 )~~( NaN )');
      assert.deepEqual(chainMaker.addValue(null).addValue(false).addValue(22).reverseChain().reverseChain().reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue('DEF').finishChain(), '( [object Object] )~~( 22 )~~( false )~~( null )~~( DEF )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue('GHI').reverseChain().addValue(false).addValue('8.963').addValue(1.233).addValue('8.963').reverseChain().finishChain(), '( 8.963 )~~( 1.233 )~~( 8.963 )~~( false )~~( GHI )');
      assert.deepEqual(chainMaker.addValue(1.233).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().addValue('8.963').reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(3.14).reverseChain().finishChain(), '( 3.14 )~~( [object Object] )~~( 8.963 )~~( [object Object] )~~( 1.233 )');
      assert.deepEqual(chainMaker.reverseChain().addValue(3.14).reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().addValue(1).addValue(0).finishChain(), '( 3.14 )~~( 1 )~~( 0 )');
      assert.deepEqual(chainMaker.reverseChain().addValue(333).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(333).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(Infinity).reverseChain().reverseChain().finishChain(), '( 333 )~~( 333 )~~( [object Object] )~~( [object Object] )~~( Infinity )');
      assert.deepEqual(chainMaker.reverseChain().addValue(1.233).addValue(22).reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().addValue(22).reverseChain().finishChain(), '( 22 )~~( 1.233 )~~( 22 )');
      assert.deepEqual(chainMaker.addValue(NaN).addValue(1.233).reverseChain().addValue(Infinity).addValue(NaN).reverseChain().reverseChain().reverseChain().addValue(333).addValue('ABC').finishChain(), '( NaN )~~( Infinity )~~( NaN )~~( 1.233 )~~( 333 )~~( ABC )');
      assert.deepEqual(chainMaker.addValue(22).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue('ABC').reverseChain().addValue(0).addValue('ABC').reverseChain().addValue('8.963').addValue({ 0: 'first', 1: 'second', 'length': 2 }).finishChain(), '( ABC )~~( 0 )~~( 22 )~~( [object Object] )~~( ABC )~~( 8.963 )~~( [object Object] )');
      assert.deepEqual(chainMaker.reverseChain().addValue(1).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(Infinity).reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().finishChain(), '( 1 )~~( [object Object] )~~( Infinity )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue(Infinity).reverseChain().addValue(3.14).addValue(null).addValue(false).addValue(1).addValue(NaN).reverseChain().finishChain(), '( NaN )~~( 1 )~~( false )~~( null )~~( 3.14 )~~( Infinity )');
      assert.deepEqual(chainMaker.reverseChain().addValue(333).reverseChain().reverseChain().addValue(333).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(null).reverseChain().reverseChain().finishChain(), '( 333 )~~( 333 )~~( [object Object] )~~( null )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue(333).reverseChain().addValue(22).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue('DEF').finishChain(), '( [object Object] )~~( 22 )~~( 333 )~~( [object Object] )~~( DEF )');
      assert.deepEqual(chainMaker.addValue(1.233).addValue(333).reverseChain().reverseChain().reverseChain().reverseChain().addValue('GHI').reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(null).finishChain(), '( GHI )~~( 333 )~~( 1.233 )~~( [object Object] )~~( null )');
      assert.deepEqual(chainMaker.reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(0).addValue(true).addValue(false).reverseChain().addValue('DEF').reverseChain().addValue(1).finishChain(), '( DEF )~~( [object Object] )~~( 0 )~~( true )~~( false )~~( 1 )');
      assert.deepEqual(chainMaker.addValue(null).reverseChain().addValue('ABC').reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().reverseChain().addValue(true).finishChain(), '( [object Object] )~~( ABC )~~( null )~~( true )');
      assert.deepEqual(chainMaker.addValue('DEF').addValue(0).reverseChain().addValue(true).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(1).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(Infinity).addValue(22).addValue(1.233).finishChain(), '( 0 )~~( DEF )~~( true )~~( [object Object] )~~( 1 )~~( [object Object] )~~( Infinity )~~( 22 )~~( 1.233 )');
      assert.deepEqual(chainMaker.reverseChain().addValue('ABC').reverseChain().reverseChain().reverseChain().addValue(Infinity).addValue(false).addValue(0).addValue('8.963').reverseChain().finishChain(), '( 8.963 )~~( 0 )~~( false )~~( Infinity )~~( ABC )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue(1.233).addValue('DEF').addValue(true).addValue('DEF').reverseChain().reverseChain().addValue(NaN).finishChain(), '( 1.233 )~~( DEF )~~( true )~~( DEF )~~( NaN )');
      assert.deepEqual(chainMaker.addValue(null).reverseChain().reverseChain().addValue(null).reverseChain().reverseChain().reverseChain().addValue(1).reverseChain().addValue(null).finishChain(), '( 1 )~~( null )~~( null )~~( null )');
      assert.deepEqual(chainMaker.addValue(Infinity).reverseChain().addValue(false).reverseChain().addValue(NaN).reverseChain().reverseChain().reverseChain().reverseChain().addValue(333).finishChain(), '( false )~~( Infinity )~~( NaN )~~( 333 )');
      assert.deepEqual(chainMaker.addValue(0).addValue(1.233).addValue('GHI').addValue(0).addValue(333).addValue('DEF').addValue(NaN).reverseChain().addValue(true).addValue(3.14).finishChain(), '( NaN )~~( DEF )~~( 333 )~~( 0 )~~( GHI )~~( 1.233 )~~( 0 )~~( true )~~( 3.14 )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue('ABC').reverseChain().addValue('GHI').reverseChain().addValue(Infinity).reverseChain().addValue(22).finishChain(), '( Infinity )~~( ABC )~~( GHI )~~( 22 )');
      assert.deepEqual(chainMaker.addValue('ABC').reverseChain().addValue(NaN).addValue('DEF').reverseChain().reverseChain().addValue(NaN).reverseChain().addValue(false).addValue('GHI').finishChain(), '( NaN )~~( DEF )~~( NaN )~~( ABC )~~( false )~~( GHI )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(NaN).reverseChain().reverseChain().finishChain(), '( [object Object] )~~( [object Object] )~~( NaN )');
      assert.deepEqual(chainMaker.addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(22).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().addValue(333).reverseChain().addValue(null).reverseChain().addValue(null).finishChain(), '( null )~~( [object Object] )~~( 22 )~~( [object Object] )~~( 333 )~~( null )');
      assert.deepEqual(chainMaker.reverseChain().addValue(3.14).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue('DEF').addValue('DEF').addValue('GHI').reverseChain().addValue('ABC').reverseChain().addValue(0).finishChain(), '( ABC )~~( 3.14 )~~( [object Object] )~~( DEF )~~( DEF )~~( GHI )~~( 0 )');
      assert.deepEqual(chainMaker.addValue('DEF').addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(0).addValue(false).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().reverseChain().finishChain(), '( [object Object] )~~( [object Object] )~~( false )~~( 0 )~~( DEF )~~( [object Object] )');
      assert.deepEqual(chainMaker.reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(false).reverseChain().reverseChain().reverseChain().addValue(333).addValue(1).reverseChain().finishChain(), '( 1 )~~( 333 )~~( [object Object] )~~( [object Object] )~~( false )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue(1).addValue(22).reverseChain().addValue(true).reverseChain().addValue(333).reverseChain().reverseChain().finishChain(), '( true )~~( 1 )~~( 22 )~~( 333 )');
      assert.deepEqual(chainMaker.reverseChain().addValue(3.14).reverseChain().reverseChain().addValue('8.963').addValue(22).reverseChain().reverseChain().reverseChain().addValue(true).finishChain(), '( 22 )~~( 8.963 )~~( 3.14 )~~( true )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue(false).addValue(333).addValue('GHI').addValue(333).reverseChain().reverseChain().addValue(false).reverseChain().finishChain(), '( false )~~( 333 )~~( GHI )~~( 333 )~~( false )');
      assert.deepEqual(chainMaker.addValue(1).reverseChain().reverseChain().reverseChain().addValue(22).reverseChain().addValue(1.233).addValue(true).reverseChain().addValue(1.233).finishChain(), '( true )~~( 1.233 )~~( 1 )~~( 22 )~~( 1.233 )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue(3.14).addValue(3.14).addValue('DEF').addValue('ABC').addValue('8.963').reverseChain().reverseChain().reverseChain().finishChain(), '( 8.963 )~~( ABC )~~( DEF )~~( 3.14 )~~( 3.14 )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue(NaN).reverseChain().addValue(null).addValue(1.233).addValue(true).addValue(false).addValue(1.233).finishChain(), '( NaN )~~( null )~~( 1.233 )~~( true )~~( false )~~( 1.233 )');
      assert.deepEqual(chainMaker.reverseChain().addValue(Infinity).addValue('DEF').addValue(22).addValue(NaN).reverseChain().addValue('DEF').addValue(Infinity).addValue(1.233).addValue({ 0: 'first', 1: 'second', 'length': 2 }).finishChain(), '( NaN )~~( 22 )~~( DEF )~~( Infinity )~~( DEF )~~( Infinity )~~( 1.233 )~~( [object Object] )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue(1.233).reverseChain().addValue(true).addValue(null).reverseChain().addValue('DEF').addValue(false).finishChain(), '( null )~~( true )~~( 1.233 )~~( DEF )~~( false )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue(true).reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().reverseChain().finishChain(), '( true )');
      assert.deepEqual(chainMaker.addValue(Infinity).reverseChain().addValue(true).reverseChain().addValue(Infinity).addValue({ 0: 'first', 1: 'second', 'length': 2 }).addValue(null).reverseChain().addValue(Infinity).addValue('8.963').finishChain(), '( null )~~( [object Object] )~~( Infinity )~~( Infinity )~~( true )~~( Infinity )~~( 8.963 )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue(0).addValue(true).reverseChain().addValue('ABC').reverseChain().reverseChain().reverseChain().reverseChain().finishChain(), '( true )~~( 0 )~~( ABC )');
      assert.deepEqual(chainMaker.addValue(false).addValue(null).addValue(true).reverseChain().reverseChain().addValue(1.233).reverseChain().reverseChain().addValue(333).reverseChain().finishChain(), '( 333 )~~( 1.233 )~~( true )~~( null )~~( false )');
      assert.deepEqual(chainMaker.addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().reverseChain().addValue(true).addValue(Infinity).reverseChain().reverseChain().reverseChain().addValue('8.963').reverseChain().finishChain(), '( 8.963 )~~( [object Object] )~~( true )~~( Infinity )');
      assert.deepEqual(chainMaker.reverseChain().reverseChain().addValue('DEF').addValue(NaN).reverseChain().addValue(333).reverseChain().addValue('GHI').addValue('ABC').addValue({ 0: 'first', 1: 'second', 'length': 2 }).finishChain(), '( 333 )~~( DEF )~~( NaN )~~( GHI )~~( ABC )~~( [object Object] )');
    });
    it.optional('removeValues works correctly', () => {
      assert.deepEqual(chainMaker.reverseChain().reverseChain().reverseChain().addValue(NaN).reverseChain().addValue(null).addValue(1.233).addValue(true).addValue(false).removeValue(3).addValue(1.233).finishChain(), '( NaN )~~( null )~~( true )~~( false )~~( 1.233 )');
      assert.deepEqual(chainMaker.reverseChain().addValue('ABC').reverseChain().reverseChain().reverseChain().addValue(Infinity).addValue(false).addValue(0).addValue('8.963').removeValue(2).removeValue(1).reverseChain().finishChain(), '( 8.963 )~~( 0 )~~( false )');
      assert.deepEqual(chainMaker.addValue(null).addValue(false).addValue(22).reverseChain().reverseChain().removeValue(2).reverseChain().reverseChain().addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue('DEF').finishChain(), '( [object Object] )~~( 22 )~~( null )~~( DEF )');
      assert.deepEqual(chainMaker.addValue(3.14).addValue(1).addValue({ 0: 'first', 1: 'second', 'length': 2 }).removeValue(1).addValue('DEF').addValue({ 0: 'first', 1: 'second', 'length': 2 }).removeValue(1).addValue(true).addValue(false).addValue(333).reverseChain().reverseChain().finishChain(), '( [object Object] )~~( DEF )~~( [object Object] )~~( true )~~( false )~~( 333 )');
      assert.deepEqual(chainMaker.addValue('ABC').reverseChain().reverseChain().addValue('DEF').removeValue(1).addValue({ 0: 'first', 1: 'second', 'length': 2 }).reverseChain().addValue(1.233).addValue(1.233).reverseChain().addValue('ABC').finishChain(), '( 1.233 )~~( 1.233 )~~( DEF )~~( [object Object] )~~( ABC )');
    });
  });
});
